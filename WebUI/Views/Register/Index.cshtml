@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/Userlayout.cshtml";
}

@model EntityLayer.Dto.RegisterDto

<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!--/main-->
<section class="vh-100 bg-image"
         style="background-image: url('https://mdbcdn.b-cdn.net/img/Photos/new-templates/search-box/img4.webp');">
    <div class="mask d-flex align-items-center h-100 gradient-custom-3">
        <div class="container h-100">
            <div class="row d-flex justify-content-center align-items-center h-100" style="margin:40px;">
                <div class="card" style="border-radius: 15px;">
                    <div class="card-body p-5">
                        <form class="form" method="post" 
                            href="/register/index" 
                            id="registration-form" 
                            enctype="multipart/form-data">
                            <div class="form-outline mb-4">
                                <label for="validationCustom01">Name</label>
                                <input asp-for="WriterName" class="form-control" required />
                                @Html.ValidationMessageFor(x => x.WriterName, "", new {@class="text-danger"})
                            </div>
                            <div class="form-outline mb-4">
                                <label class="form-label" for="validationCustom02">Mail</label>
                                <input asp-for="WriterMail" class="form-control" required />
                                @Html.ValidationMessageFor(x => x.WriterMail, "", new {@class="text-danger"})
                            </div>
                            <div class="form-outline mb-4">
                                <label class="form-label" for="exampleInputPassword1 mb-2">Password</label>
                                <input asp-for="WriterPassword" class="form-control" required type="password" />
                                @Html.ValidationMessageFor(x => x.WriterPassword, "", new {@class="text-danger"})
                            </div>
                            <div class="form-outline mb-4">
                                <label class="form-label" for="exampleInputPassword1 mb-2">Confirm Password</label>
                                <input asp-for="WriterPasswordAgain" class="form-control" required type="password" />
                                @Html.ValidationMessageFor(x => x.WriterPasswordAgain, "", new {@class="text-danger "})
                            </div>
                            @*<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">*@
                            <div class="form-group">
                                <label class="form-label" for="WriterImage">File upload</label>
                                <input type="file" class="form-control" asp-for="WriterImage" />
                            </div>
                            <button type="submit" class="btn btn-primary submit mb-4" id="register-button">Register</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@*<script>
    $('#register-button').click(function (e) {
        e.preventDefault();
        var password = $('#WriterPassword').val();
        var passwordAgain = $('#WriterPasswordAgain').val();
        if (password === passwordAgain) {
            $.ajax({
                type: 'POST',
                url: '/Register/Index',
                data: $('#registration-form').serialize(),
                success: function () {
                    Swal.fire({
                        icon: 'success',
                        title: 'Done!',
                        text: 'Registration successful',
                    });
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Function returned error!',
                    });
                }
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Passwords do not match!',
            });
        }
    });
</script>

*@